{"version":3,"file":"static/js/59.089c826a.chunk.js","mappings":"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","sources":["components/ai/ChatbotIcon.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport chatbotIcon from '../assets/chatboticon.jpeg';\r\nimport './Chatbot.css';\r\n\r\nconst ChatbotIcon = () => {\r\n  const [isChatbotVisible, setIsChatbotVisible] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    { text: \"Hello! How can I assist you today?\", sender: \"bot\", timestamp: new Date() },\r\n  ]);\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [isMinimized, setIsMinimized] = useState(false);\r\n  const [suggestionsVisible, setSuggestionsVisible] = useState(true);\r\n  const [voiceInputActive, setVoiceInputActive] = useState(false);\r\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  const navigate = useNavigate();\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const recognitionRef = useRef(null);\r\n\r\n  // Enhanced knowledge base with multi-language support\r\n  const knowledgeBase = useMemo(() => ({\r\n    en: {\r\n      greeting: [\"Hello!\", \"Hi there!\", \"Greetings!\", \"How can I help you today?\"],\r\n      help: [\"I can help you navigate the website.\", \"Ask me about the different sections available.\"],\r\n      features: [\r\n        \"This site has portfolio, student info, food gallery, and more!\",\r\n        \"You can explore employee data, product pages, and YouTube integration.\"\r\n      ],\r\n      default: [\r\n        \"I'm not sure I understand. Could you rephrase that?\",\r\n        \"I'm still learning. Try asking about specific pages.\",\r\n        \"You can type 'help' to see what I can do.\"\r\n      ]\r\n    },\r\n    es: {\r\n      greeting: [\"¡Hola!\", \"¿Cómo estás?\", \"Buenos días!\"],\r\n      help: [\"Puedo ayudarte a navegar por el sitio web.\", \"Pregúntame sobre las diferentes secciones disponibles.\"],\r\n      features: [\r\n        \"Este sitio tiene portafolio, información de estudiantes, galería de comida y más!\",\r\n        \"Puedes explorar datos de empleados, páginas de productos e integración con YouTube.\"\r\n      ],\r\n      default: [\r\n        \"No estoy seguro de entender. ¿Podrías reformular eso?\",\r\n        \"Todavía estoy aprendiendo. Intenta preguntar sobre páginas específicas.\",\r\n        \"Puedes escribir 'ayuda' para ver lo que puedo hacer.\"\r\n      ]\r\n    }\r\n  }), []);\r\n\r\n  const getRandomResponse = useCallback((category) => {\r\n    const options = knowledgeBase[selectedLanguage][category] || knowledgeBase[selectedLanguage].default;\r\n    return options[Math.floor(Math.random() * options.length)];\r\n  }, [selectedLanguage, knowledgeBase]);\r\n\r\n  const handleSendMessage = useCallback((text = null) => {\r\n    const messageToSend = text || userMessage;\r\n    \r\n    if (messageToSend.trim() !== \"\") {\r\n      const newUserMessage = { \r\n        text: messageToSend, \r\n        sender: \"user\", \r\n        timestamp: new Date() \r\n      };\r\n      \r\n      setMessages((prev) => [...prev, newUserMessage]);\r\n      setUserMessage(\"\");\r\n      setIsTyping(true);\r\n\r\n      if (!isChatbotVisible) {\r\n        setUnreadCount(prev => prev + 1);\r\n      }\r\n\r\n      const messageLower = messageToSend.toLowerCase();\r\n\r\n      // Keyword-based routing\r\n      const keywordMap = {\r\n        portfolio: \"/portfolio\",\r\n        student: \"/studentinfo\",\r\n        about: \"/about\",\r\n        gallery: \"/gallery\",\r\n        food: \"/foodhome\",\r\n        sheet: \"/excelsheet\",\r\n        home: \"/home\",\r\n        age: \"/age\",\r\n        product: \"/productpage\",\r\n        employee: \"/employee\",\r\n        youtube: \"/yt\",\r\n        status: \"/status\",\r\n      };\r\n\r\n      // Check for greetings\r\n      if (['hello', 'hi', 'hey', 'hola', 'buenos días'].some(word => messageLower.includes(word))) {\r\n        setTimeout(() => {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { text: getRandomResponse('greeting'), sender: \"bot\", timestamp: new Date() },\r\n          ]);\r\n          setIsTyping(false);\r\n        }, 1000);\r\n        return;\r\n      }\r\n\r\n      // Check for help requests\r\n      if (messageLower.includes('help') || messageLower.includes('ayuda')) {\r\n        setTimeout(() => {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { text: getRandomResponse('help'), sender: \"bot\", timestamp: new Date() },\r\n          ]);\r\n          setIsTyping(false);\r\n        }, 1000);\r\n        return;\r\n      }\r\n\r\n      // Check for features inquiry\r\n      if (['what can you do', 'features', 'options', 'qué puedes hacer'].some(phrase => messageLower.includes(phrase))) {\r\n        setTimeout(() => {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { text: getRandomResponse('features'), sender: \"bot\", timestamp: new Date() },\r\n          ]);\r\n          setIsTyping(false);\r\n        }, 1000);\r\n        return;\r\n      }\r\n\r\n      // Navigation logic\r\n      let navigated = false;\r\n      for (const [keyword, route] of Object.entries(keywordMap)) {\r\n        if (messageLower.includes(keyword)) {\r\n          setTimeout(() => navigate(route), 1200);\r\n          setTimeout(() => {\r\n            setMessages((prev) => [\r\n              ...prev,\r\n              { text: `Taking you to the ${keyword} page...`, sender: \"bot\", timestamp: new Date() },\r\n            ]);\r\n            setIsTyping(false);\r\n          }, 1000);\r\n          navigated = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!navigated) {\r\n        setTimeout(() => {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { text: getRandomResponse('default'), sender: \"bot\", timestamp: new Date() },\r\n          ]);\r\n          setIsTyping(false);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [getRandomResponse, isChatbotVisible, navigate, userMessage]);\r\n\r\n  // Initialize speech recognition\r\n  useEffect(() => {\r\n    if ('webkitSpeechRecognition' in window) {\r\n      recognitionRef.current = new window.webkitSpeechRecognition();\r\n      recognitionRef.current.continuous = false;\r\n      recognitionRef.current.interimResults = false;\r\n      recognitionRef.current.lang = selectedLanguage;\r\n\r\n      recognitionRef.current.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setUserMessage(transcript);\r\n        handleSendMessage(transcript);\r\n      };\r\n\r\n      recognitionRef.current.onerror = (event) => {\r\n        console.error('Speech recognition error', event.error);\r\n        setVoiceInputActive(false);\r\n      };\r\n\r\n      recognitionRef.current.onend = () => {\r\n        setVoiceInputActive(false);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, [selectedLanguage, handleSendMessage]);\r\n\r\n  const toggleChatbot = () => {\r\n    setIsChatbotVisible(!isChatbotVisible);\r\n    if (!isChatbotVisible) {\r\n      setTimeout(() => inputRef.current?.focus(), 100);\r\n      setUnreadCount(0);\r\n    }\r\n  };\r\n\r\n  const toggleMinimize = () => {\r\n    setIsMinimized(!isMinimized);\r\n  };\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n\r\n  const toggleSuggestions = () => {\r\n    setSuggestionsVisible(!suggestionsVisible);\r\n  };\r\n\r\n  const toggleVoiceInput = () => {\r\n    if (voiceInputActive) {\r\n      recognitionRef.current.stop();\r\n      setVoiceInputActive(false);\r\n    } else {\r\n      recognitionRef.current.start();\r\n      setVoiceInputActive(true);\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (e) => {\r\n    setSelectedLanguage(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setMessages([\r\n      { text: getRandomResponse('greeting'), sender: \"bot\", timestamp: new Date() },\r\n    ]);\r\n  };\r\n\r\n  const saveChat = () => {\r\n    setChatHistory([...chatHistory, { \r\n      date: new Date(), \r\n      messages: messages.filter(msg => msg.sender !== 'bot' || !msg.text.includes('Quick Options:'))\r\n    }]);\r\n    setMessages([\r\n      { text: \"Chat saved! How else can I help?\", sender: \"bot\", timestamp: new Date() },\r\n    ]);\r\n  };\r\n\r\n  const loadChat = (index) => {\r\n    if (chatHistory[index]) {\r\n      setMessages([\r\n        { text: \"Loaded previous conversation:\", sender: \"bot\", timestamp: new Date() },\r\n        ...chatHistory[index].messages\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const exportChat = () => {\r\n    const chatText = messages.map(msg => \r\n      `${msg.sender === 'user' ? 'You' : 'Bot'}: ${msg.text} (${formatTime(msg.timestamp)})`\r\n    ).join('\\n');\r\n    \r\n    const blob = new Blob([chatText], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `chat_${new Date().toISOString().slice(0, 10)}.txt`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Auto-scroll to bottom\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Format time\r\n  const formatTime = (date) => {\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  // Quick suggestions based on context\r\n  const getQuickSuggestions = () => {\r\n    const lastMessage = messages[messages.length - 1]?.text.toLowerCase() || '';\r\n    \r\n    if (lastMessage.includes('help') || lastMessage.includes('ayuda')) {\r\n      return [\"Show features\", \"Navigation help\", \"What can you do?\"];\r\n    }\r\n    \r\n    if (lastMessage.includes('hello') || lastMessage.includes('hi') || lastMessage.includes('hola')) {\r\n      return [\"What can you do?\", \"Show quick links\", \"Change language\"];\r\n    }\r\n    \r\n    return [\"Ask for help\", \"Show quick links\", \"What's new?\"];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Floating Icon */}\r\n      <div className=\"chatbot-icon\" onClick={toggleChatbot}>\r\n        <img src={chatbotIcon} alt=\"Chatbot Icon\" />\r\n        {unreadCount > 0 && <span className=\"notification-badge\">{unreadCount}</span>}\r\n      </div>\r\n\r\n      {/* Chatbot UI */}\r\n      {isChatbotVisible && (\r\n        <div className={`chatbot-container ${darkMode ? 'dark-mode' : ''} ${isMinimized ? 'minimized' : ''}`}>\r\n          <div className=\"chatbot-header\">\r\n            <div className=\"header-left\">\r\n              <h3>AI Assistant</h3>\r\n              <span className=\"status-indicator\">\r\n                {isTyping ? 'Typing...' : 'Online'}\r\n                {voiceInputActive && ' 🎤'}\r\n              </span>\r\n            </div>\r\n            <div className=\"header-right\">\r\n              <select \r\n                value={selectedLanguage} \r\n                onChange={handleLanguageChange}\r\n                className=\"language-selector\"\r\n              >\r\n                <option value=\"en\">🇬🇧 English</option>\r\n                <option value=\"es\">🇪🇸 Español</option>\r\n              </select>\r\n              <button onClick={toggleDarkMode} className=\"icon-button\">\r\n                {darkMode ? '☀️' : '🌙'}\r\n              </button>\r\n              <button onClick={toggleMinimize} className=\"icon-button\">\r\n                {isMinimized ? '🗖' : '🗕'}\r\n              </button>\r\n              <button onClick={toggleChatbot} className=\"icon-button close-chatbot\">\r\n                ✕\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {!isMinimized && (\r\n            <>\r\n              <div className=\"chatbot-body\">\r\n                <div className=\"chatbot-messages\">\r\n                  {messages.map((message, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`message ${message.sender}-message`}\r\n                    >\r\n                      <div className=\"message-content\">\r\n                        {message.text}\r\n                        <span className=\"message-time\">\r\n                          {formatTime(message.timestamp)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  {isTyping && (\r\n                    <div className=\"message bot-message\">\r\n                      <div className=\"typing-indicator\">\r\n                        <span></span>\r\n                        <span></span>\r\n                        <span></span>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <div ref={messagesEndRef} />\r\n                </div>\r\n\r\n                {/* Quick navigation options */}\r\n                {suggestionsVisible && (\r\n                  <div className=\"quick-options\">\r\n                    <div className=\"quick-suggestions\">\r\n                      {getQuickSuggestions().map((suggestion, index) => (\r\n                        <button \r\n                          key={index} \r\n                          onClick={() => {\r\n                            setUserMessage(suggestion);\r\n                            inputRef.current.focus();\r\n                          }}\r\n                          className=\"suggestion-button\"\r\n                        >\r\n                          {suggestion}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <p>Quick Navigation:</p>\r\n                    <div className=\"quick-buttons\">\r\n                      <button onClick={() => navigate(\"/portfolio\")}>📄 Portfolio</button>\r\n                      <button onClick={() => navigate(\"/studentinfo\")}>🎓 Student</button>\r\n                      <button onClick={() => navigate(\"/foodhome\")}>🍔 Food</button>\r\n                      <button onClick={() => navigate(\"/excelsheet\")}>📊 Sheet</button>\r\n                      <button onClick={() => navigate(\"/employee\")}>🧑‍💼 Employee</button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"chatbot-footer\">\r\n                <div className=\"input-container\">\r\n                  <button \r\n                    onClick={toggleVoiceInput} \r\n                    className={`voice-button ${voiceInputActive ? 'active' : ''}`}\r\n                    title=\"Voice input\"\r\n                  >\r\n                    🎤\r\n                  </button>\r\n                  <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message here...\"\r\n                    className=\"chatbot-input\"\r\n                    value={userMessage}\r\n                    onChange={(e) => setUserMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                  />\r\n                  <button className=\"send-button\" onClick={() => handleSendMessage()}>\r\n                    Send\r\n                  </button>\r\n                </div>\r\n                <div className=\"chat-actions\">\r\n                  <button onClick={toggleSuggestions} className=\"action-button\">\r\n                    {suggestionsVisible ? 'Hide Suggestions' : 'Show Suggestions'}\r\n                  </button>\r\n                  <button onClick={clearChat} className=\"action-button\">\r\n                    Clear\r\n                  </button>\r\n                  <button onClick={saveChat} className=\"action-button\">\r\n                    Save\r\n                  </button>\r\n                  {chatHistory.length > 0 && (\r\n                    <select \r\n                      onChange={(e) => loadChat(e.target.value)} \r\n                      className=\"history-selector\"\r\n                      title=\"Load previous chat\"\r\n                    >\r\n                      <option value=\"\">Load chat...</option>\r\n                      {chatHistory.map((chat, index) => (\r\n                        <option key={index} value={index}>\r\n                          {chat.date.toLocaleString()}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  )}\r\n\r\n                  <button onClick={exportChat} className=\"action-button\">\r\n                    Export\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatbotIcon;"],"names":["ChatbotIcon","isChatbotVisible","setIsChatbotVisible","useState","messages","setMessages","text","sender","timestamp","Date","userMessage","setUserMessage","isTyping","setIsTyping","darkMode","setDarkMode","chatHistory","setChatHistory","isMinimized","setIsMinimized","suggestionsVisible","setSuggestionsVisible","voiceInputActive","setVoiceInputActive","selectedLanguage","setSelectedLanguage","unreadCount","setUnreadCount","navigate","useNavigate","messagesEndRef","useRef","inputRef","recognitionRef","knowledgeBase","useMemo","en","greeting","help","features","default","es","getRandomResponse","useCallback","category","options","Math","floor","random","length","handleSendMessage","messageToSend","arguments","undefined","trim","newUserMessage","prev","messageLower","toLowerCase","keywordMap","portfolio","student","about","gallery","food","sheet","home","age","product","employee","youtube","status","some","word","includes","setTimeout","phrase","navigated","keyword","route","Object","entries","useEffect","window","current","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","results","onerror","console","error","onend","stop","toggleChatbot","_inputRef$current","focus","_messagesEndRef$curre","scrollIntoView","behavior","formatTime","date","toLocaleTimeString","hour","minute","_jsxs","_Fragment","children","className","onClick","_jsx","src","alt","value","onChange","e","target","toggleDarkMode","toggleMinimize","map","message","index","ref","getQuickSuggestions","_messages","lastMessage","suggestion","toggleVoiceInput","start","title","type","placeholder","onKeyDown","key","toggleSuggestions","clearChat","saveChat","filter","msg","loadChat","chat","toLocaleString","exportChat","chatText","join","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","toISOString","slice","click","revokeObjectURL"],"sourceRoot":""}