{"version":3,"file":"static/js/242.4741e170.chunk.js","mappings":"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","sources":["components/oneui/Gallery.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport './Gallery.css';\r\n\r\nconst Gallery = () => {\r\n  const [media, setMedia] = useState([]);\r\n  const [filteredMedia, setFilteredMedia] = useState([]);\r\n  const [files, setFiles] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [sortCriteria, setSortCriteria] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [previewMedia, setPreviewMedia] = useState(null);\r\n  const [selectedMedia, setSelectedMedia] = useState([]); // For multi-selection\r\n\r\n  useEffect(() => {\r\n    fetchMedia();\r\n  }, []);\r\n\r\n  const fetchMedia = () => {\r\n    axios\r\n      .get('http://localhost:3001/media')\r\n      .then((response) => {\r\n        setMedia(response.data);\r\n        setFilteredMedia(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching media', error);\r\n      });\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFiles(e.target.files);\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < files.length; i++) {\r\n      formData.append('media', files[i]);\r\n    }\r\n\r\n    axios\r\n      .post('http://localhost:3001/upload', formData)\r\n      .then(() => {\r\n        alert('Files uploaded successfully');\r\n        fetchMedia();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error uploading files', error);\r\n      });\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    axios\r\n      .delete(`http://localhost:3001/media/${id}`)\r\n      .then(() => {\r\n        alert('File deleted successfully');\r\n        fetchMedia();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error deleting file', error);\r\n      });\r\n  };\r\n\r\n  const handleBulkDelete = () => {\r\n    if (selectedMedia.length === 0) {\r\n      alert('No media selected for deletion');\r\n      return;\r\n    }\r\n\r\n    const deletePromises = selectedMedia.map((id) =>\r\n      axios.delete(`http://localhost:3001/media/${id}`)\r\n    );\r\n\r\n    Promise.all(deletePromises)\r\n      .then(() => {\r\n        alert('Selected files deleted successfully');\r\n        setSelectedMedia([]); // Clear the selection\r\n        fetchMedia();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error deleting files', error);\r\n      });\r\n  };\r\n\r\n  const handleSelectMedia = (id) => {\r\n    setSelectedMedia((prev) =>\r\n      prev.includes(id) ? prev.filter((mediaId) => mediaId !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    const query = e.target.value.toLowerCase();\r\n    setSearchQuery(query);\r\n    filterMedia(query, filterType);\r\n  };\r\n\r\n  const handleSortChange = (e) => {\r\n    const criteria = e.target.value;\r\n    setSortCriteria(criteria);\r\n    let sorted = [...filteredMedia];\r\n    if (criteria === 'name') {\r\n      sorted = sorted.sort((a, b) => a.original_name.localeCompare(b.original_name));\r\n    } else if (criteria === 'date') {\r\n      sorted = sorted.sort((a, b) => new Date(a.uploadDate) - new Date(b.uploadDate));\r\n    }\r\n    setFilteredMedia(sorted);\r\n  };\r\n\r\n  const handleFilterChange = (e) => {\r\n    const type = e.target.value;\r\n    setFilterType(type);\r\n    filterMedia(searchQuery, type);\r\n  };\r\n\r\n  const filterMedia = (query, type) => {\r\n    let filtered = media.filter((item) =>\r\n      item.original_name && item.original_name.toLowerCase().includes(query)\r\n    );\r\n    if (type === 'image') {\r\n      filtered = filtered.filter(\r\n        (item) => item.url.endsWith('.jpg') || item.url.endsWith('.png')\r\n      );\r\n    } else if (type === 'video') {\r\n      filtered = filtered.filter(\r\n        (item) =>\r\n          item.url.endsWith('.mp4') || item.url.endsWith('.mov') || item.url.endsWith('.avi')\r\n      );\r\n    }\r\n    setFilteredMedia(filtered);\r\n  };\r\n\r\n  const handleMediaClick = (item) => {\r\n    setPreviewMedia(item);\r\n  };\r\n\r\n  const closePreview = () => {\r\n    setPreviewMedia(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery\">\r\n      <h1>Media Gallery</h1>\r\n      <div className=\"upload-container\">\r\n        <input type=\"file\" multiple onChange={handleFileChange} />\r\n        <button onClick={handleUpload}>Upload</button>\r\n      </div>\r\n\r\n      <div className=\"filter-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by name...\"\r\n          value={searchQuery}\r\n          onChange={handleSearchChange}\r\n        />\r\n        <select value={sortCriteria} onChange={handleSortChange}>\r\n          <option value=\"\">Sort By</option>\r\n          <option value=\"name\">Name</option>\r\n          <option value=\"date\">Date</option>\r\n        </select>\r\n        <select value={filterType} onChange={handleFilterChange}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"image\">Images</option>\r\n          <option value=\"video\">Videos</option>\r\n        </select>\r\n        <button onClick={handleBulkDelete}>Delete Selected</button>\r\n      </div>\r\n\r\n      <div className=\"gallery-items\">\r\n        {filteredMedia.map((item, index) => {\r\n          const isVideo =\r\n            item.url &&\r\n            (item.url.endsWith('.mp4') || item.url.endsWith('.mov') || item.url.endsWith('.avi'));\r\n          return (\r\n            <div\r\n              className={`gallery-item ${selectedMedia.includes(item.id) ? 'selected' : ''}`}\r\n              key={index}\r\n            >\r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedMedia.includes(item.id)}\r\n                  onChange={() => handleSelectMedia(item.id)}\r\n                />\r\n              </div>\r\n              {isVideo ? (\r\n                <video src={item.url} controls onClick={() => handleMediaClick(item)} />\r\n              ) : (\r\n                <img\r\n                  src={item.url}\r\n                  alt={`Media item ${index}`}\r\n                  onClick={() => handleMediaClick(item)}\r\n                />\r\n              )}\r\n              <button\r\n                className=\"delete-button\"\r\n                onClick={() => handleDelete(item.id)}\r\n              >\r\n                <FaTrash />\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {previewMedia && (\r\n        <div className=\"preview-overlay\" onClick={closePreview}>\r\n          <div className=\"preview-content\" onClick={(e) => e.stopPropagation()}>\r\n            {previewMedia.url &&\r\n            (previewMedia.url.endsWith('.mp4') ||\r\n              previewMedia.url.endsWith('.mov') ||\r\n              previewMedia.url.endsWith('.avi')) ? (\r\n              <video src={previewMedia.url} controls />\r\n            ) : (\r\n              <img src={previewMedia.url} alt=\"Preview\" />\r\n            )}\r\n            <button className=\"close-button\" onClick={closePreview}>\r\n              Close</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n"],"names":["Gallery","media","setMedia","useState","filteredMedia","setFilteredMedia","files","setFiles","searchQuery","setSearchQuery","sortCriteria","setSortCriteria","filterType","setFilterType","previewMedia","setPreviewMedia","selectedMedia","setSelectedMedia","useEffect","fetchMedia","axios","get","then","response","data","catch","error","console","filterMedia","query","type","filtered","filter","item","original_name","toLowerCase","includes","url","endsWith","handleMediaClick","closePreview","_jsxs","className","children","_jsx","multiple","onChange","e","target","onClick","handleUpload","formData","FormData","i","length","append","post","alert","placeholder","value","criteria","sorted","sort","a","b","localeCompare","Date","uploadDate","handleBulkDelete","deletePromises","map","id","delete","Promise","all","index","isVideo","checked","handleSelectMedia","prev","mediaId","src","controls","alt","handleDelete","FaTrash","stopPropagation"],"sourceRoot":""}