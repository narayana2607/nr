{"version":3,"file":"static/js/609.18cd7fc9.chunk.js","mappings":"8JAIA,MAmGA,EAnGoBA,IAAwB,IAAvB,KAAEC,EAAI,QAAEC,GAASF,EACpC,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,IAGjCG,GAAeC,EAAAA,EAAAA,cAAYC,UAC/B,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,+BAAgC,CAC/DC,OAAQ,CAAEC,MAAOZ,KAEnBa,QAAQC,IAAI,kBAAmBN,EAASO,MACxCX,EAAWI,EAASO,KACtB,CAAE,MAAOC,GACPH,QAAQG,MAAM,uBAAwBA,GACtCZ,EAAW,GACb,IACC,CAACJ,IA+BJ,OA5BAiB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,IACK,KAAlBA,EAAMC,SACRrB,GACF,EASF,OANID,EACFuB,OAAOC,iBAAiB,UAAWJ,GAEnCG,OAAOE,oBAAoB,UAAWL,GAGjC,KACLG,OAAOE,oBAAoB,UAAWL,EAAU,CACjD,GACA,CAACpB,EAAMC,KAGVkB,EAAAA,EAAAA,YAAU,KACJjB,EAAWwB,OACbnB,IAEAD,EAAW,GACb,GACC,CAACJ,EAAYK,IAGXP,GAKH2B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,wBAAwBG,QAAS9B,EAAQ4B,SAAC,OAG5DF,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLJ,UAAU,kCACVK,MAAO/B,EACPgC,SAAWC,GAAMhC,EAAcgC,EAAEC,OAAOH,OACxCI,YAAY,uBAEdP,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBC,SAAC,cAC/BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SACzBxB,EAAQiC,OAAS,EAChBjC,EAAQkC,KAAI,CAACC,EAAQC,KACnBX,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,gCAA+BC,SAAA,EACvDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,CAC7CW,EAAOE,aAAa,KAAGF,EAAOG,OAEjChB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BC,SAAEW,EAAOI,UAExDJ,EAAOK,UACNlB,EAAAA,EAAAA,KAAA,OACEmB,IACEN,EAAOK,QAAQE,WAAW,QACtBP,EAAOK,QACP,yBAAyBL,EAAOK,UAEtCG,IAAKR,EAAOI,MAAQ,QACpBhB,UAAU,sCAfPa,MAqBXd,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAAC,gCA1CrC,IA+CD,C","sources":["components/Search/PopupSearch.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport './PopupSearch.css';\r\n\r\nconst PopupSearch = ({ show, onClose }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [results, setResults] = useState([]);\r\n\r\n  // Fetch search results from the server\r\n  const handleSearch = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3001/search', {\r\n        params: { query: searchTerm },\r\n      });\r\n      console.log('Search Results:', response.data);\r\n      setResults(response.data);\r\n    } catch (error) {\r\n      console.error('Error during search:', error);\r\n      setResults([]); // Reset results on error\r\n    }\r\n  }, [searchTerm]);\r\n\r\n  // Handle \"Escape\" key to close the popup\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (show) {\r\n      window.addEventListener('keydown', handleEsc);\r\n    } else {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, [show, onClose]);\r\n\r\n  // Trigger search when searchTerm changes\r\n  useEffect(() => {\r\n    if (searchTerm.trim()) {\r\n      handleSearch();\r\n    } else {\r\n      setResults([]);\r\n    }\r\n  }, [searchTerm, handleSearch]);\r\n\r\n  // Handle case when popup is not visible\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"popup-container\">\r\n      <div className=\"popup-content\">\r\n        <button className=\"close-btn popup-close\" onClick={onClose}>\r\n          X\r\n        </button>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input popup-search-input\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          placeholder=\"Type to search...\"\r\n        />\r\n        <div className=\"results popup-results\">\r\n          <h3 className=\"results-header\">Results:</h3>\r\n          <ul className=\"results-list\">\r\n            {results.length > 0 ? (\r\n              results.map((result, index) => (\r\n                <li key={index} className=\"result-item popup-result-item\">\r\n                  <div className=\"result-info popup-result-info\">\r\n                    <div className=\"result-title popup-result-title\">\r\n                      {result.source_table}: {result.id}\r\n                    </div>\r\n                    <div className=\"result-meta popup-result-meta\">{result.name}</div>\r\n                  </div>\r\n                  {result.address && (\r\n                    <img\r\n                      src={\r\n                        result.address.startsWith('http')\r\n                          ? result.address\r\n                          : `http://localhost:3001/${result.address}`\r\n                      }\r\n                      alt={result.name || 'Image'}\r\n                      className=\"result-image popup-result-image\"\r\n                    />\r\n                  )}\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <p className=\"no-results-message\">No results found.</p>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopupSearch;\r\n"],"names":["_ref","show","onClose","searchTerm","setSearchTerm","useState","results","setResults","handleSearch","useCallback","async","response","axios","get","params","query","console","log","data","error","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","trim","_jsx","className","children","_jsxs","onClick","type","value","onChange","e","target","placeholder","length","map","result","index","source_table","id","name","address","src","startsWith","alt"],"sourceRoot":""}