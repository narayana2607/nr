{"version":3,"file":"static/js/28.4d263d04.chunk.js","mappings":"oKAoZA,MAmDA,EAnDyBA,IAAuC,IAAtC,YAAEC,EAAc,gBAAgBD,EACxD,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,UAC1CC,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTJ,UAAU,mBACVK,QAAS,CAAEC,MAAO,GAAKC,QAAS,GAChCC,QAAS,CAAEF,MAAO,EAAGC,QAAS,GAC9BE,WAAY,CAAEC,SAAU,IAAMT,SAAA,EAE9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAACI,EAAAA,EAAOC,IAAG,CACTI,QAAS,CAAEG,OAAQ,KACnBF,WAAY,CAAEC,SAAU,EAAGE,OAAQC,IAAUC,KAAM,UAAWb,UAE9DF,EAAAA,EAAAA,KAACgB,EAAAA,IAAO,CAACf,UAAU,iBAErBD,EAAAA,EAAAA,KAACiB,EAAAA,IAAS,CAAChB,UAAU,iBAGvBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,UAC/BF,EAAAA,EAAAA,KAACI,EAAAA,EAAOc,KAAI,CACVT,QAAS,CAAED,QAAS,CAAC,GAAK,EAAG,KAC7BE,WAAY,CAAEC,SAAU,EAAGE,OAAQC,KAAWZ,SAC/C,kCAKHC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,6BACLF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAEH,IAAmB,4DAI9EC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACjCF,EAAAA,EAAAA,KAACI,EAAAA,EAAOC,IAAG,CACTJ,UAAU,eACVK,QAAS,CAAEa,MAAO,GAClBV,QAAS,CAAEU,MAAO,OAClBT,WAAY,CAAEC,SAAU,EAAGE,OAAQC,IAAUM,WAAY,gBAI7DjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAACqB,EAAAA,IAAM,CAACpB,UAAU,eAClBD,EAAAA,EAAAA,KAAA,QAAAE,SAAM,mCAGN,C","sources":["components/student/StudentInfo.js"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from 'react';\r\n// import axios from 'axios';\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\nimport './StudentInfo.css';\r\n\r\n// // Define initial empty form state for resetting\r\n// const initialFormData = {\r\n//   name: '',\r\n//   sevisId: '',\r\n//   dob: '',\r\n//   phoneNumber: '',\r\n//   email: '',\r\n//   address: '',\r\n//   country: '',\r\n//   visaType: '',\r\n//   visaStatus: '',\r\n//   universityName: '',\r\n//   universityAddress: '',\r\n//   job: '',\r\n//   experience: '',\r\n//   companyName: '',\r\n// };\r\n\r\n// const StudentInfo = () => {\r\n//   const [students, setStudents] = useState([]);\r\n//   const [formData, setFormData] = useState(initialFormData);\r\n//   const [profilePic, setProfilePic] = useState(null);\r\n//   const [supportingDocs, setSupportingDocs] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n//   const [editingStudent, setEditingStudent] = useState(null);\r\n//   const [viewingStudent, setViewingStudent] = useState(null);\r\n//   const BASE_URL = 'http://localhost:3001';\r\n\r\n//   // --- Core Functions (define before dependent functions) ---\r\n\r\n//   const fetchStudents = useCallback(async () => {\r\n//     try {\r\n//       const response = await axios.get(`${BASE_URL}/studentinfo`);\r\n//       setStudents(response.data);\r\n//     } catch (error) {\r\n//       console.error('Failed to fetch student data:', error); // Log error for debugging\r\n//       toast.error('Failed to fetch student data.');\r\n//     }\r\n//   }, [BASE_URL]);\r\n\r\n//   // Defined closeModal *before* handleSave which uses it as a dependency\r\n//   const closeModal = useCallback(() => {\r\n//     setIsModalOpen(false);\r\n//     setEditingStudent(null);\r\n//     setFormData(initialFormData); // Reset form to initial state\r\n//     setProfilePic(null);          // Reset profile picture\r\n//     setSupportingDocs([]);        // Reset supporting documents\r\n//   }, []); // No dependencies needed as setters are stable\r\n\r\n//   const openModal = useCallback((student = null) => {\r\n//     setEditingStudent(student);\r\n//     // Populate form data if editing, otherwise use initial state\r\n//     setFormData({\r\n//       name: student?.name || '',\r\n//       sevisId: student?.sevisId || '',\r\n//       dob: student?.dob ? new Date(student.dob).toISOString().split('T')[0] : '',\r\n//       phoneNumber: student?.phoneNumber || '',\r\n//       email: student?.email || '',\r\n//       address: student?.address || '',\r\n//       country: student?.country || '',\r\n//       visaType: student?.visaType || '',\r\n//       visaStatus: student?.visaStatus || '',\r\n//       universityName: student?.universityName || '',\r\n//       universityAddress: student?.universityAddress || '',\r\n//       job: student?.job || '',\r\n//       experience: student?.experience || '',\r\n//       companyName: student?.companyName || '',\r\n//     });\r\n//     setProfilePic(null); // Always reset file inputs when opening modal\r\n//     setSupportingDocs([]);\r\n//     setIsModalOpen(true);\r\n//     setViewingStudent(null); // Close view modal if add/edit is opened\r\n//   }, []); // No dependencies needed\r\n\r\n//   // --- Dependent Functions ---\r\n\r\n//   const handleSave = useCallback(async () => {\r\n//     const data = new FormData();\r\n//     // Ensure all keys from initialFormData are present, even if empty\r\n//     for (const key in initialFormData) {\r\n//        data.append(key, formData[key] || '');\r\n//     }\r\n\r\n//     if (profilePic) data.append('profilePic', profilePic);\r\n//     if (supportingDocs) {\r\n//       for (let i = 0; i < supportingDocs.length; i++) {\r\n//         data.append('supportingDocs', supportingDocs[i]);\r\n//       }\r\n//     }\r\n\r\n//     try {\r\n//       if (editingStudent) {\r\n//         await axios.put(`${BASE_URL}/studentinfo/${editingStudent.id}`, data, {\r\n//           headers: { 'Content-Type': 'multipart/form-data' },\r\n//         });\r\n//         toast.success('Student data updated successfully!');\r\n//       } else {\r\n//         await axios.post(`${BASE_URL}/studentinfo`, data, {\r\n//           headers: { 'Content-Type': 'multipart/form-data' },\r\n//         });\r\n//         toast.success('Student data saved successfully!');\r\n//       }\r\n//       fetchStudents(); // Refresh list\r\n//       closeModal();    // Close modal after save (NOW DECLARED ABOVE)\r\n//     } catch (error) {\r\n//       console.error('Failed to save student data:', error); // Log error\r\n//        // Provide more specific error if possible from response\r\n//       const errorMsg = error.response?.data?.message || 'Failed to save student data.';\r\n//       toast.error(errorMsg);\r\n//     }\r\n//   }, [BASE_URL, editingStudent, formData, profilePic, supportingDocs, fetchStudents, closeModal]); // closeModal is now valid here\r\n\r\n//   const handleDelete = useCallback(async (id) => {\r\n//     if (window.confirm('Are you sure you want to delete this student?')) {\r\n//       try {\r\n//         await axios.delete(`${BASE_URL}/studentinfo/${id}`);\r\n//         toast.success('Student data deleted successfully!');\r\n//         fetchStudents(); // Refresh list\r\n//         if (viewingStudent?.id === id) {\r\n//            setViewingStudent(null); // Close view modal if deleted student was being viewed\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Failed to delete student data:', error); // Log error\r\n//         toast.error('Failed to delete student data.');\r\n//       }\r\n//     }\r\n//   }, [BASE_URL, fetchStudents, viewingStudent?.id]); // Added viewingStudent.id dependency\r\n\r\n//   // --- useEffect Hook ---\r\n\r\n//   useEffect(() => {\r\n//     fetchStudents();\r\n//   }, [fetchStudents]); // Run once on mount and if fetchStudents changes (it won't due to useCallback)\r\n\r\n//   // --- Other Event Handlers ---\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prev) => ({ ...prev, [name]: value }));\r\n//   };\r\n\r\n//   const handleFileChange = (e) => {\r\n//     if (e.target.name === 'profilePic') {\r\n//       setProfilePic(e.target.files[0]);\r\n//     } else {\r\n//       setSupportingDocs(Array.from(e.target.files)); // Ensure it's an array\r\n//     }\r\n//   };\r\n\r\n//    const handleView = (student) => {\r\n//      setViewingStudent(student);\r\n//      setIsModalOpen(false); // Close edit/add modal if view is opened\r\n//    };\r\n\r\n//   const handleSearchChange = (e) => {\r\n//     setSearchTerm(e.target.value.toLowerCase());\r\n//   };\r\n\r\n//   // --- Filtering Logic ---\r\n//   const filteredStudents = students.filter((student) =>\r\n//     Object.values(student).some((value) =>\r\n//       value?.toString().toLowerCase().includes(searchTerm)\r\n//     )\r\n//   );\r\n\r\n//   // --- JSX Return ---\r\n//   return (\r\n//     <div className=\"student-info\">\r\n//       <ToastContainer position=\"top-right\" autoClose={3000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />\r\n//       <div className=\"stu\">\r\n//         <p>Student Info Management</p>\r\n//       </div>\r\n\r\n//       <button className=\"add-student-btn\" onClick={() => openModal()}>\r\n//         Add New Student\r\n//       </button>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Search all columns...\"\r\n//         value={searchTerm}\r\n//         onChange={handleSearchChange}\r\n//         className=\"search-input\"\r\n//       />\r\n\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Profile Picture</th>\r\n//             <th>Name</th>\r\n//             <th>SEVIS ID</th>\r\n//             <th>Phone Number</th>\r\n//             <th>Email</th>\r\n//             <th>Address</th>\r\n//             <th>Country</th>\r\n//             <th>Visa Type</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {filteredStudents.map((student) => (\r\n//             <tr key={student.id}>\r\n//               <td>\r\n//                 {student.profilePic ? (\r\n//                   <img\r\n//                     src={`${BASE_URL}/${student.profilePic}`}\r\n//                     alt={`${student.name}'s profile`} // Better alt text\r\n//                     style={{ width: '50px', height: '50px', objectFit: 'cover', borderRadius: '50%' }} // Added border radius\r\n//                   />\r\n//                 ) : (\r\n//                   <div style={{ width: '50px', height: '50px', borderRadius: '50%', backgroundColor: '#eee', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '12px', color: '#666' }}>No Pic</div> // Placeholder style\r\n//                 )}\r\n//               </td>\r\n//               <td>{student.name}</td>\r\n//               <td>{student.sevisId}</td>\r\n//               <td>{student.phoneNumber}</td>\r\n//               <td>{student.email}</td>\r\n//               <td>{student.address}</td>\r\n//               <td>{student.country}</td>\r\n//               <td>{student.visaType}</td>\r\n//               <td>\r\n//                 <FontAwesomeIcon\r\n//                   icon={faEdit}\r\n//                   className=\"action-icon edit-icon\" // Use classes for styling\r\n//                   onClick={() => openModal(student)}\r\n//                   title=\"Edit\"\r\n//                 />\r\n//                 <FontAwesomeIcon\r\n//                   icon={faTrash}\r\n//                   className=\"action-icon delete-icon\" // Use classes for styling\r\n//                   onClick={() => handleDelete(student.id)}\r\n//                   title=\"Delete\"\r\n//                 />\r\n//                 <button\r\n//                   className=\"view-btn action-button\" // Use classes for styling\r\n//                   onClick={() => handleView(student)}\r\n//                   title=\"View\"\r\n//                 >\r\n//                   View\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* View Student Details Modal */}\r\n//       {viewingStudent && (\r\n//         <div className=\"modal-overlay\" onClick={() => setViewingStudent(null)}> {/* Close on overlay click */}\r\n//           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}> {/* Prevent closing when clicking inside modal */}\r\n//             <div className=\"modal-header\">\r\n//               <h2>Student Details</h2>\r\n//               <button\r\n//                 className=\"close-modal\"\r\n//                 onClick={() => setViewingStudent(null)}\r\n//                 title=\"Close\"\r\n//               >\r\n//                 &times;\r\n//               </button>\r\n//             </div>\r\n//             <div className=\"modal-body view-details\"> {/* Specific class for view */}\r\n//               {viewingStudent.profilePic && (\r\n//                   <img\r\n//                     src={`${BASE_URL}/${viewingStudent.profilePic}`}\r\n//                     alt={`${viewingStudent.name}'s profile`}\r\n//                     style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '50%', marginBottom: '15px', display: 'block', marginLeft: 'auto', marginRight: 'auto' }}\r\n//                   />\r\n//                 )}\r\n//               <p><strong>Name:</strong> {viewingStudent.name}</p>\r\n//               <p><strong>SEVIS ID:</strong> {viewingStudent.sevisId}</p>\r\n//               <p><strong>DOB:</strong> {viewingStudent.dob ? new Date(viewingStudent.dob).toLocaleDateString() : 'N/A'}</p> {/* Format Date */}\r\n//               <p><strong>Phone Number:</strong> {viewingStudent.phoneNumber}</p>\r\n//               <p><strong>Email:</strong> {viewingStudent.email}</p>\r\n//               <p><strong>Address:</strong> {viewingStudent.address}</p>\r\n//               <p><strong>Country:</strong> {viewingStudent.country}</p>\r\n//               <p><strong>Visa Type:</strong> {viewingStudent.visaType}</p>\r\n//               <p><strong>Visa Status:</strong> {viewingStudent.visaStatus}</p>\r\n//               <p><strong>University Name:</strong> {viewingStudent.universityName}</p>\r\n//               <p><strong>University Address:</strong> {viewingStudent.universityAddress}</p>\r\n//               <p><strong>Job:</strong> {viewingStudent.job}</p>\r\n//               <p><strong>Experience:</strong> {viewingStudent.experience}</p>\r\n//               <p><strong>Company Name:</strong> {viewingStudent.companyName}</p>\r\n//               {viewingStudent.supportingDocs && viewingStudent.supportingDocs.length > 0 && (\r\n//                 <div>\r\n//                     <strong>Supporting Documents:</strong>\r\n//                     <ul>\r\n//                         {viewingStudent.supportingDocs.map((doc, index) => (\r\n//                           <li key={index}>\r\n//                             <a\r\n//                               href={`${BASE_URL}/${doc}`}\r\n//                               target=\"_blank\"\r\n//                               rel=\"noopener noreferrer\"\r\n//                             >\r\n//                               {/* Extract filename */}\r\n//                               {doc.split('/').pop()}\r\n//                             </a>\r\n//                           </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Add/Edit Student Modal */}\r\n//       {isModalOpen && (\r\n//         <div className=\"modal-overlay\" onClick={closeModal}> {/* Close on overlay click */}\r\n//           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}> {/* Prevent closing when clicking inside modal */}\r\n//             <div className=\"modal-header\">\r\n//               <h2>{editingStudent ? 'Edit Student' : 'Add New Student'}</h2>\r\n//               <button className=\"close-modal\" onClick={closeModal} title=\"Close\">\r\n//                 &times;\r\n//               </button>\r\n//             </div>\r\n//             <div className=\"modal-body form-fields\"> {/* Specific class for form */}\r\n//               {/* Consider grouping fields logically, e.g., Personal, Contact, Visa, Work */}\r\n//                <div className=\"form-grid\"> {/* Use CSS Grid or Flexbox for layout */}\r\n//                  <div><label>NAME:</label><input type=\"text\" name=\"name\" placeholder=\"Name\" value={formData.name || ''} onChange={handleInputChange} required/></div>\r\n//                  <div><label>SEVIS ID:</label><input type=\"text\" name=\"sevisId\" placeholder=\"SEVIS ID\" value={formData.sevisId || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>DATE OF BIRTH:</label><input type=\"date\" name=\"dob\" value={formData.dob || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>PHONE NO:</label><input type=\"tel\" name=\"phoneNumber\" placeholder=\"Phone Number\" value={formData.phoneNumber || ''} onChange={handleInputChange}/></div> {/* Use type=\"tel\" */}\r\n//                  <div><label>EMAIL:</label><input type=\"email\" name=\"email\" placeholder=\"Email\" value={formData.email || ''} onChange={handleInputChange} required/></div>\r\n//                  <div><label>ADDRESS:</label><input type=\"text\" name=\"address\" placeholder=\"Address\" value={formData.address || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>COUNTRY:</label><input type=\"text\" name=\"country\" placeholder=\"Country\" value={formData.country || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>VISA TYPE:</label><input type=\"text\" name=\"visaType\" placeholder=\"Visa Type (e.g., F1, H1B)\" value={formData.visaType || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>VISA STATUS:</label><input type=\"text\" name=\"visaStatus\" placeholder=\"Visa Status (e.g., Approved, Pending)\" value={formData.visaStatus || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>UNIVERSITY NAME:</label><input type=\"text\" name=\"universityName\" placeholder=\"University Name\" value={formData.universityName || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>UNIVERSITY ADDRESS:</label><input type=\"text\" name=\"universityAddress\" placeholder=\"University Address\" value={formData.universityAddress || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>JOB:</label><input type=\"text\" name=\"job\" placeholder=\"Job Title\" value={formData.job || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>EXPERIENCE:</label><input type=\"text\" name=\"experience\" placeholder=\"Years of Experience\" value={formData.experience || ''} onChange={handleInputChange}/></div>\r\n//                  <div><label>COMPANY NAME:</label><input type=\"text\" name=\"companyName\" placeholder=\"Company Name\" value={formData.companyName || ''} onChange={handleInputChange}/></div>\r\n//                </div>\r\n\r\n//               <div className=\"file-input-section\">\r\n//                 <label>Profile Picture:</label>\r\n//                 <input type=\"file\" name=\"profilePic\" accept=\"image/*\" onChange={handleFileChange} /> {/* Accept only images */}\r\n//                 {/* Show current image preview if editing */}\r\n//                 {editingStudent?.profilePic && !profilePic && (\r\n//                    <img src={`${BASE_URL}/${editingStudent.profilePic}`} alt=\"Current profile\" style={{ width: '60px', height: '60px', objectFit: 'cover', marginLeft: '10px', verticalAlign: 'middle' }} />\r\n//                 )}\r\n//                  {/* Show newly selected image preview */}\r\n//                  {profilePic && (\r\n//                    <img src={URL.createObjectURL(profilePic)} alt=\"New profile preview\" style={{ width: '60px', height: '60px', objectFit: 'cover', marginLeft: '10px', verticalAlign: 'middle' }} />\r\n//                  )}\r\n//               </div>\r\n\r\n//               <div className=\"file-input-section\">\r\n//                 <label>Supporting Documents:</label>\r\n//                 <input type=\"file\" name=\"supportingDocs\" multiple onChange={handleFileChange} />\r\n//                 {/* List current documents if editing */}\r\n//                 {editingStudent?.supportingDocs && editingStudent.supportingDocs.length > 0 && (\r\n//                     <div>\r\n//                         <p>Current Documents:</p>\r\n//                         <ul>\r\n//                             {editingStudent.supportingDocs.map((doc, index) => (\r\n//                                 <li key={index}>\r\n//                                     <a href={`${BASE_URL}/${doc}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                                         {doc.split('/').pop()}\r\n//                                     </a>\r\n//                                     {/* Optional: Add a way to remove existing docs */}\r\n//                                 </li>\r\n//                             ))}\r\n//                         </ul>\r\n//                     </div>\r\n//                  )}\r\n//                   {/* List newly selected documents */}\r\n//                   {supportingDocs.length > 0 && (\r\n//                     <div>\r\n//                         <p>New Documents to Upload:</p>\r\n//                         <ul>\r\n//                             {supportingDocs.map((doc, index) => (\r\n//                                 <li key={index}>{doc.name}</li>\r\n//                             ))}\r\n//                         </ul>\r\n//                     </div>\r\n//                    )}\r\n//               </div>\r\n\r\n//               <button className=\"save-button\" onClick={handleSave}>\r\n//                 {editingStudent ? 'Update Student' : 'Save Student'}\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StudentInfo;\r\nimport React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { FaTools, FaHardHat, FaCode } from 'react-icons/fa';\r\n\r\nconst UnderDevelopment = ({ featureName = \"this feature\" }) => {\r\n  return (\r\n    <div className=\"under-development-container\">\r\n      <motion.div \r\n        className=\"development-card\"\r\n        initial={{ scale: 0.9, opacity: 0 }}\r\n        animate={{ scale: 1, opacity: 1 }}\r\n        transition={{ duration: 0.5 }}\r\n      >\r\n        <div className=\"construction-icon\">\r\n          <motion.div\r\n            animate={{ rotate: 360 }}\r\n            transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\r\n          >\r\n            <FaTools className=\"gear-icon\" />\r\n          </motion.div>\r\n          <FaHardHat className=\"hat-icon\" />\r\n        </div>\r\n        \r\n        <h2 className=\"development-title\">\r\n          <motion.span\r\n            animate={{ opacity: [0.6, 1, 0.6] }}\r\n            transition={{ duration: 2, repeat: Infinity }}\r\n          >\r\n            Feature Under Construction\r\n          </motion.span>\r\n        </h2>\r\n        \r\n        <p className=\"development-text\">\r\n          We're currently building <span className=\"feature-name\">{featureName}</span> with care. \r\n          Check back soon for this exciting update!\r\n        </p>\r\n        \r\n        <div className=\"progress-container\">\r\n          <motion.div\r\n            className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: \"65%\" }}\r\n            transition={{ duration: 2, repeat: Infinity, repeatType: \"reverse\" }}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"dev-meta\">\r\n          <FaCode className=\"code-icon\" />\r\n          <span>Development in progress</span>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnderDevelopment;"],"names":["_ref","featureName","_jsx","className","children","_jsxs","motion","div","initial","scale","opacity","animate","transition","duration","rotate","repeat","Infinity","ease","FaTools","FaHardHat","span","width","repeatType","FaCode"],"sourceRoot":""}