{"version":3,"file":"static/js/189.8da7788c.chunk.js","mappings":"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","sources":["components/Sheets/Excelsheet.js"],"sourcesContent":["// Existing imports...\r\nimport Swal from 'sweetalert2';\r\nimport './ExcelSheet.css';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nfunction ExcelSheet() {\r\n  const [data, setData] = useState([]);\r\n  const [fileName, setFileName] = useState('');\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n  const [showOverlay, setShowOverlay] = useState(false);\r\n  const [originalFileName, setOriginalFileName] = useState('');\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Handle Excel File Upload\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    setFileName(file.name);\r\n    setOriginalFileName(file.name);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const binaryString = event.target.result;\r\n      const workbook = XLSX.read(binaryString, { type: 'binary' });\r\n      const worksheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[worksheetName];\r\n      const excelData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n      setData(excelData);\r\n      setShowOverlay(true);\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(data);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n    XLSX.writeFile(workbook, fileName || 'downloaded_data.xlsx');\r\n  };\r\n\r\n  const handleAddRow = () => {\r\n    const newRow = {};\r\n    getColumnNames().forEach((col) => (newRow[col] = ''));\r\n    setData([...data, newRow]);\r\n  };\r\n\r\n  const handleAddColumn = () => {\r\n    const newColumnName = prompt('Enter Column Name');\r\n    if (!newColumnName) return;\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [newColumnName]: '',\r\n    }));\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleChange = (rowIndex, colName, value) => {\r\n    const newData = [...data];\r\n    newData[rowIndex][colName] = value;\r\n    setData(newData);\r\n  };\r\n\r\n  const handleSaveToDB = async () => {\r\n    try {\r\n      const { value: saveOption } = await Swal.fire({\r\n        title: 'Save File',\r\n        text: `Do you want to save with the same file name (${originalFileName}) or a new file name?`,\r\n        icon: 'question',\r\n        showCancelButton: true,\r\n        confirmButtonText: `Save as \"${originalFileName}\"`,\r\n        cancelButtonText: 'Save as new file',\r\n      });\r\n\r\n      let saveFileName = originalFileName;\r\n\r\n      if (!saveOption) {\r\n        const { value: customFileName } = await Swal.fire({\r\n          title: 'Enter New File Name',\r\n          input: 'text',\r\n          inputPlaceholder: 'Enter file name...',\r\n          showCancelButton: true,\r\n        });\r\n\r\n        if (!customFileName) {\r\n          Swal.fire('Cancelled', 'Save operation was cancelled', 'info');\r\n          return;\r\n        }\r\n\r\n        saveFileName = customFileName;\r\n      }\r\n\r\n      setFileName(saveFileName);\r\n\r\n      await axios.post('http://localhost:3001/uploadExcelData', {\r\n        fileName: saveFileName,\r\n        data,\r\n      });\r\n\r\n      Swal.fire('Success', 'Data saved to database', 'success');\r\n      fetchUploadedFiles();\r\n    } catch (error) {\r\n      console.error('Error saving data:', error);\r\n      Swal.fire('Error', 'Failed to save data to database', 'error');\r\n    }\r\n  };\r\n\r\n  // NEW: Delete File\r\n  const handleDeleteFile = async (id) => {\r\n    try {\r\n      const confirm = await Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: 'You will not be able to recover this file!',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Yes, delete it!',\r\n        cancelButtonText: 'No, keep it',\r\n      });\r\n\r\n      if (confirm.isConfirmed) {\r\n        await axios.delete(`http://localhost:3001/files/${id}`);\r\n        Swal.fire('Deleted!', 'Your file has been deleted.', 'success');\r\n        fetchUploadedFiles();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting file:', error);\r\n      Swal.fire('Error', 'Failed to delete file', 'error');\r\n    }\r\n  };\r\n\r\n  const fetchUploadedFiles = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3001/files');\r\n      setUploadedFiles(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching files:', error);\r\n    }\r\n  };\r\n\r\n  const handleViewFile = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/files/${id}`);\r\n\r\n      setFileName(response.data.file_name);\r\n      setOriginalFileName(response.data.file_name);\r\n\r\n      const fileData = response.data.data;\r\n\r\n      const allKeys = Array.from(\r\n        new Set(fileData.flatMap((row) => Object.keys(row)))\r\n      );\r\n\r\n      const normalizedData = fileData.map((row) => {\r\n        const normalizedRow = {};\r\n        allKeys.forEach((key) => {\r\n          normalizedRow[key] = row[key] || '';\r\n        });\r\n        return normalizedRow;\r\n      });\r\n\r\n      setData(normalizedData);\r\n      setShowOverlay(true);\r\n    } catch (error) {\r\n      console.error('Error viewing file:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUploadedFiles();\r\n  }, []);\r\n\r\n  const getColumnNames = () => {\r\n    if (data.length === 0) return [];\r\n    const uniqueColumns = new Set();\r\n    data.forEach((row) => {\r\n      Object.keys(row).forEach((key) => uniqueColumns.add(key));\r\n    });\r\n    return Array.from(uniqueColumns);\r\n  };\r\n\r\n  const columnNames = getColumnNames();\r\n\r\n  return (\r\n    <div className=\"excel-container\">\r\n      {!showOverlay && (\r\n        <>\r\n          <div className=\"file-controls\">\r\n            <input\r\n              type=\"file\"\r\n              ref={fileInputRef}\r\n              onChange={handleFileUpload}\r\n              id=\"fileInput\"\r\n              className=\"file-input\"\r\n            />\r\n            <label htmlFor=\"fileInput\" className=\"upload-button\">\r\n              Choose File\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"uploaded-files\">\r\n            <h3>Uploaded Files:</h3>\r\n            <ul>\r\n              {uploadedFiles.map((file) => (\r\n                <li key={file.id}>\r\n                  {file.file_name}\r\n                  <button onClick={() => handleViewFile(file.id)}>View</button>\r\n                  <button onClick={() => handleDeleteFile(file.id)}>Delete</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {showOverlay && (\r\n        <div className=\"overlay\">\r\n          <div className=\"overlay-content\">\r\n            <div className=\"overlay-buttons fixed-buttons\">\r\n              <button className=\"close-overlay\" onClick={() => setShowOverlay(false)}>Close</button>\r\n              <button onClick={handleDownload}>Download</button>\r\n              <button onClick={handleAddRow}>Add Row</button>\r\n              <button onClick={handleAddColumn}>Add Column</button>\r\n              <button onClick={handleSaveToDB}>Save to DB</button>\r\n            </div>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"excel-table\">\r\n                <thead>\r\n                  <tr>\r\n                    {columnNames.map((colName, index) => (\r\n                      <th key={index}>{colName}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.map((row, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      {columnNames.map((colName, colIndex) => (\r\n                        <td key={colIndex}>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={row[colName] || ''}\r\n                            onChange={(e) =>\r\n                              handleChange(rowIndex, colName, e.target.value)\r\n                            }\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExcelSheet;\r\n"],"names":["data","setData","useState","fileName","setFileName","uploadedFiles","setUploadedFiles","showOverlay","setShowOverlay","originalFileName","setOriginalFileName","fileInputRef","useRef","fetchUploadedFiles","async","response","axios","get","error","console","useEffect","getColumnNames","length","uniqueColumns","Set","forEach","row","Object","keys","key","add","Array","from","columnNames","_jsxs","className","children","_Fragment","_jsx","type","ref","onChange","e","file","target","files","name","reader","FileReader","onload","event","binaryString","result","workbook","XLSX","worksheetName","SheetNames","worksheet","Sheets","excelData","sheet_to_json","readAsBinaryString","id","htmlFor","map","file_name","onClick","fileData","allKeys","flatMap","normalizedData","normalizedRow","handleViewFile","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","delete","handleDeleteFile","handleDownload","json_to_sheet","book_new","book_append_sheet","handleAddRow","newRow","col","handleAddColumn","newColumnName","prompt","updatedData","value","saveOption","saveFileName","customFileName","input","inputPlaceholder","post","colName","index","rowIndex","colIndex","handleChange","newData"],"sourceRoot":""}