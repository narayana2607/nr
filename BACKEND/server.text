const express = require('express');
const multer = require('multer');
const mysql2 = require('mysql2');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const bcrypt = require('bcrypt');
const stripe = require('stripe')('your-secret-key'); // Replace with your Stripe Secret Key
const app = express();
app.use(express.json());


const port = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Serve static files from 'uploads' directory
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// MySQL connection
const connection = mysql2.createConnection({
  host: 'localhost',
  user: 'root',
  password: '1234',
  database: 'nnrpvtltd',
});

connection.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    process.exit(1);
  } else {
    console.log('Connected to MySQL');
  }
});

// Ensure 'uploads' directory exists
if (!fs.existsSync(path.join(__dirname, 'uploads'))) {
  fs.mkdirSync(path.join(__dirname, 'uploads'));
}

// Define storage using multer.diskStorage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // Save in 'uploads' directory
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname); // Name file with timestamp
  },
});

// Multer upload setup with file filter
const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    const fileTypes = /jpeg|jpg|png|gif|mp4|mov|mkv|avi/;
    const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = fileTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Error: Only images and videos are allowed!'));
    }
  },
});

// Stripe Payment Endpoint
app.post('/create-checkout-session', async (req, res) => {
  try {
    const { items } = req.body;

    // Validate items
    if (!items || items.length === 0) {
      return res.status(400).send({ error: 'No items provided for checkout.' });
    }

    // Map items to Stripe line items
    const lineItems = items.map((item) => ({
      price_data: {
        currency: 'usd',
        product_data: {
          name: item.name,
        },
        unit_amount: item.price * 100, // Convert price to cents
      },
      quantity: item.quantity,
    }));

    // Create Stripe Checkout session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: 'http://localhost:3000/success',
      cancel_url: 'http://localhost:3000/cancel',
    });

    res.json({ id: session.id });
  } catch (error) {
    console.error('Error creating checkout session:', error);
    res.status(500).send({ error: 'Failed to create checkout session' });
  }
});

// Endpoint for uploading files
app.post('/upload', upload.array('media', 500), (req, res) => {
  const files = req.files;
  if (!files || files.length === 0) {
    return res.status(400).send('No files uploaded.');
  }

  const sql = 'INSERT INTO images (path, original_name, uploadDate) VALUES ?';
  const values = files.map((file) => [`uploads/${file.filename}`, file.originalname, new Date()]);

  connection.query(sql, [values], (err, result) => {
    if (err) {
      console.error('Error saving files to database:', err);
      return res.status(500).send('Server error');
    }
    res.send({ message: 'Files uploaded successfully', mediaIds: result.insertId });
  });
});

// Endpoint to retrieve media information from the database with URLs
app.get('/media', (req, res) => {
  const sql = 'SELECT id, path, original_name, uploadDate FROM images';
  connection.query(sql, (err, results) => {
    if (err) {
      console.error('Error fetching media from database:', err);
      return res.status(500).send('Server error');
    }

    // Format URLs correctly for the front-end
    const media = results.map((item) => ({
      ...item,
      url: `http://localhost:${port}/${item.path}`,
    }));
    res.send(media);
  });
});

// DELETE route to handle file deletion
app.delete('/media/:id', (req, res) => {
  const { id } = req.params;

  const sqlSelect = 'SELECT path FROM images WHERE id = ?';
  connection.query(sqlSelect, [id], (err, results) => {
    if (err) {
      console.error('Error fetching media from database:', err);
      return res.status(500).send('Server error');
    }

    if (results.length === 0) {
      return res.status(404).send('Media not found');
    }

    const filePath = path.join(__dirname, results[0].path);

    fs.unlink(filePath, (err) => {
      if (err) {
        console.error('Error deleting file:', err);
        return res.status(500).send('Error deleting file');
      }

      const sqlDelete = 'DELETE FROM images WHERE id = ?';
      connection.query(sqlDelete, [id], (err) => {
        if (err) {
          console.error('Error deleting media from database:', err);
          return res.status(500).send('Server error');
        }
        res.send({ message: 'Media deleted successfully' });
      });
    });
  });
});




// Get all employees
app.get('/employees', (req, res) => {
  connection.query('SELECT * FROM employees', (err, result) => {
    if (err) {
      console.error('Error fetching employees:', err);
      return res.status(500).json({ error: 'Server error', details: err.message });
    }
    res.status(200).json(result);
  });
});







// Add a new employee
app.post('/employees', upload.single('profile_pic'), (req, res) => {
  const { first_name, last_name, email, phone_number, hire_date, job_title, department } = req.body;
  const profile_pic = req.file ? `/uploads/${req.file.filename}` : null;

  // Validation for required fields
  if (!first_name || !last_name || !email || !hire_date || !job_title || !department) {
    return res.status(400).json({ error: 'All fields except profile_pic are required' });
  }

  const query =
    'INSERT INTO employees (first_name, last_name, email, phone_number, hire_date, job_title, department, profile_pic) VALUES (?, ?, ?, ?, ?, ?, ?, ?)';
  connection.query(
    query,
    [first_name, last_name, email, phone_number, hire_date, job_title, department, profile_pic],
    (err, result) => {
      if (err) {
        console.error('Error adding employee:', err);
        return res.status(500).json({ error: 'Failed to add employee', details: err.message });
      }
      res.status(201).json({ message: 'Employee added successfully' });
    }
  );
});

// Edit an employee
app.put('/employees/:id', upload.single('profile_pic'), (req, res) => {
  const { first_name, last_name, email, phone_number, hire_date, job_title, department } = req.body;

  // Format `hire_date` to match MySQL `DATE` format (YYYY-MM-DD)
  const formattedHireDate = hire_date ? hire_date.split("T")[0] : null;

  // If a new profile picture is uploaded, use it; otherwise, keep the old one
  const profile_pic = req.file ? `/uploads/${req.file.filename}` : null;

  const fetchExistingProfilePic = new Promise((resolve, reject) => {
    if (profile_pic) {
      resolve(profile_pic); // New profile_pic provided
    } else {
      // Fetch the existing profile_pic from the database
      connection.query(
        'SELECT profile_pic FROM employees WHERE id = ?',
        [req.params.id],
        (err, results) => {
          if (err) {
            console.error('Error fetching profile_pic:', err);
            return reject(err);
          }
          resolve(results[0]?.profile_pic || null); // Use existing profile_pic or null
        }
      );
    }
  });

  fetchExistingProfilePic
    .then((finalProfilePic) => {
      const query =
        'UPDATE employees SET first_name = ?, last_name = ?, email = ?, phone_number = ?, hire_date = ?, job_title = ?, department = ?, profile_pic = ? WHERE id = ?';
      connection.query(
        query,
        [
          first_name,
          last_name,
          email,
          phone_number,
          formattedHireDate,
          job_title,
          department,
          finalProfilePic,
          req.params.id,
        ],
        (err, result) => {
          if (err) {
            console.error('Error updating employee:', err);
            return res.status(500).json({ error: 'Failed to update employee', details: err.message });
          }
          res.status(200).json({ message: 'Employee updated successfully.' });
        }
      );
    })
    .catch((err) => {
      console.error('Error during employee update:', err);
      res.status(500).json({ error: 'Server error during update.', details: err.message });
    });
});


// Delete an employee
app.delete('/employees/:id', (req, res) => {
  const query = 'DELETE FROM employees WHERE id = ?';
  connection.query(query, [req.params.id], (err, result) => {
    if (err) {
      console.error('Error deleting employee:', err);
      return res.status(500).json({ error: 'Failed to delete employee', details: err.message });
    }
    res.status(200).json({ message: 'Employee deleted successfully' });
  });
});







// Start server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
